"""
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order 

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]

"""

import time
from typing import List

class solution:

    #Approach-1
    #Time complexity - O(n)^2, Space complexity - O(1)

    def two_sum_quadratic_time(self, nums: List[int], target: int) -> List[int]:
        for i in range(0,len(nums)):
            for j in range(i+1,len(nums)+1):
                if nums[i] + nums[j] == target:
                    return [i,j]

    #Approach-2
    #Time complexity - O(n), Space complexity - O(n)
        
    def two_sum_linear_time(self, nums: List[int], target: int) -> List[int]:
        for i in nums:
            if target-i in nums:
                return [nums.index(i),nums.index(target-i)]


s = solution()

start_time = time.time()
print(f"output using quadratic time complexity approach : {s.two_sum_quadratic_time(nums = [2,5,6,7], target = 9)}")
print(f"total time taken for execution : {time.time() - start_time}")

time.sleep(5)

start_time = time.time()
print(f"output using linear time complexity approach : {s.two_sum_linear_time(nums = [2,5,6,7], target = 9)}")
print(f"total time taken for execution : {time.time() - start_time}")


